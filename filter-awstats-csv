#!/usr/bin/env python
"""
Remove scrap from awstats CSV.

(c) Javier Arias, Open Book Publishers, November 2017
Use of this software is governed by the terms of the MIT -- see LICENSE

usage: filter-awstats-csv [-d] inputfile outputfile
"""

import os
import csv
import sys
import optparse
from config import *
from urlparse import urlparse

URL_COL    = 9 # column number for URL to filter (starts at 0)
SKIP_FIRST = True # do not attempt to filter header
PARAMETERS = ["lang=fr", "lang=en", "lang=it", "lang=es", "lang=de",
              "mobile=1", "nomobile=1", "nomobile=0", "format=embed",
              "format=reader", "format=noaccess", "format=noaccess"]
              # list of supported/allowed GET paramters
SAFE_PARAM = ["%22", "%27", "\\", "'", "A=0"] # scrap allowed in URL

def is_valid_url(input_url):
    url = urlparse(input_url)
    is_valid = True
    if not url.query == "":
        params = url.query
        for p in params.split('&'):
            if not sanitized_parameter(p) in PARAMETERS:
                is_valid = False
    return is_valid

def sanitized_parameter(parameter):
    for safe in SAFE_PARAM:
        parameter = parameter.replace(safe, "")
    return parameter

def process_csv(infile, outfile):
    i = open(infile, 'rb')
    o = open(outfile, 'wb')
    rd = csv.reader(i)
    wt = csv.writer(o, delimiter=',', quotechar='"')

    count = 0
    for row in rd:
        outrow = row
        count += 1

        if not count == 1 or not SKIP_FIRST:
            try:
                url = row[URL_COL]
                if not is_valid_url(url):
                    print "Ignoring URL in row %d: %s" % (count, url)
                    continue
            except ValueError:
                print >> sys.stderr, "Error in row %d: %s" % (count, row)
                raise
        wt.writerow(outrow)

def delete_file(f):
    os.remove(f)

def run():
    p = optparse.OptionParser()
    p.add_option("-d", "--delete-original", dest="delete", action="store_true",
               default=False, help="Delete input file upon completion")
    options, arg = p.parse_args()
    inputf  = arg[0]
    outputf = arg[1]
    assert inputf
    assert outputf
    assert isinstance(options.delete, (bool))

    process_csv(inputf, outputf)

    if options.delete:
        delete_file(inputf)

if __name__ == '__main__':
    run()
